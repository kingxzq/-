#define _CRT_SECURE_NO_WARNINGS 1
#include<stdio.h>
#include<stdlib.h>
#include<assert.h>
typedef int SLDataType;
//动态顺序表
typedef struct Seqlist
{
	SLDataType* a;
	int size;//表示数组中存储了多少个数据
	int capacity;//数组实际能存数据的空间容量是多大
}SL;
//顺序表打印
void SeqListPrint(SL* ps)
{
	for (int i = 0; i < ps->size; ++i)
	{
		printf("%d ", ps->a[i]);
	}
	printf("\n");
}
//顺序表初始化
void SeqListInit(SL* ps)
{
	ps->a = NULL;
	ps->size = ps->capacity = 0;
}
//顺序表销毁
void SeqListDestory(SL* ps)
{
	free(ps->a);
	ps->a = NULL;
	ps->capacity = ps->size = 0;
}
//检查容量
void SeqListCheckCapacity(SL* ps)
{
	if (ps->size == ps->capacity)
	{
		//如果没有空间或空间不足扩容
		int newcapacity = ps->capacity == 0 ? 4 : ps->capacity * 2;
		SLDataType* tmp = (SLDataType*)realloc(ps->a, newcapacity * sizeof(SLDataType));
		if (tmp == NULL)
		{
			printf("realloc fail\n");
			exit(-1);
		}
		ps->a = tmp;
		ps->capacity = newcapacity;
	}
}
//顺序表尾插
void SeqListPushBack(SL* ps, SLDataType x)
{
	SeqListCheckCapacity(ps);
	ps->a[ps->size] = x;
	ps->size++;
}
//交换函数
void Swap(int* px, int* py)
{
	int tmp = *px;
	*px = *py;
	*py = tmp;
}
//冒泡排序
void BubbleSort(int* a, int n)
{
	int end = n;
	while (end > 0)
	{
		int exchange = 0;
		for (int i = 1; i < end; ++i)
		{
			if (a[i - 1] > a[i])
			{
				exchange = 1;
				Swap(&a[i - 1], &a[i]);
			}
		}
		--end;

		if (exchange == 0)
		{
			break;
		}
	}
}
//合并顺序表
void SeqListMerge(SL* L1, SL* L2)
{
	if (L2->size == 0)
		return;
	int sumsize = L1->size + L2->size;
	int pos2 = L2->size - 1;
	for (int i = 0; i < L2->size; i++)
	{
			SeqListPushBack(L1, L2->a[pos2]);
			pos2--;
	}
	BubbleSort(L1->a, sumsize);
}

int main()
{
	//建立两个顺序表并初始化
	SL L1,L2;
	SeqListInit(&L1);
	SeqListInit(&L2);
	
	//给顺序表1插入有序元素
	SeqListPushBack(&L1, 1);
	SeqListPushBack(&L1, 2);
	SeqListPushBack(&L1, 3);
	SeqListPushBack(&L1, 4);
	SeqListPushBack(&L1, 5);
	printf("顺序表1:\n");
	SeqListPrint(&L1);

	//给顺序表2插入有序元素
	SeqListPushBack(&L2, 2);
	SeqListPushBack(&L2, 3);
	SeqListPushBack(&L2, 4);
	SeqListPushBack(&L2, 5);
	SeqListPushBack(&L2, 6);
	SeqListPrint(&L2);
	printf("顺序表2:\n");
	//合并顺序表
	SeqListMerge(&L1, &L2);
	printf("合并后:\n");
	//打印输出合并后的顺序表
	SeqListPrint(&L1);

	//销毁两个顺序表
	SeqListDestory(&L1);
	SeqListDestory(&L2);
	return 0;
}
