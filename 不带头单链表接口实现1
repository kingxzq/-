//Slist.h

#define _CRT_SECURE_NO_WARNINGS 1
#pragma once
#include <stdio.h>
#include <assert.h>
#include <stdlib.h>
typedef int SLTDateType;
typedef struct SListNode
{
	SLTDateType data;
	struct SListNode* next;
}SListNode;

// 动态申请一个节点
SListNode* BuySListNode(SLTDateType x);
// 单链表打印
void SListPrint(SListNode* plist);
// 单链表尾插
void SListPushBack(SListNode** pplist, SLTDateType x);
// 单链表的头插
void SListPushFront(SListNode** pplist, SLTDateType x);
// 单链表的尾删
void SListPopBack(SListNode** pplist);
// 单链表头删
void SListPopFront(SListNode** pplist);
// 单链表查找
SListNode* SListFind(SListNode* plist, SLTDateType x);
// 单链表在pos位置之后插入x
void SListInsertAfter(SListNode* pos, SLTDateType x);
// 单链表在pos位置之前插入x
void SListInsert(SListNode** pphead, SListNode* pos, SLTDateType x);
// 单链表删除pos位置之后的值
void SListEraseAfter(SListNode* pos);
// 单链表删除pos位置的值
void SListErase(SListNode** plist, SListNode* pos);
// 单链表的销毁
void SListDestroy(SListNode** plist);

//Slist.c
#include "Slist.h"


SListNode* BuySListNode(SLTDateType x)
{
	SListNode* newnode = (SListNode*)malloc(sizeof(SListNode));

	if (newnode == NULL)
	{
		perror("malloc fail");
		exit(-1);
	}

	newnode->data = x;
	newnode->next = NULL;

	return newnode;
}
void SListPrint(SListNode* plist)
{
	SListNode* cur = plist;
	while (cur)
	{
		printf("%d->", cur->data);
		cur = cur->next;
	}

	printf("NULL\n");
}
void SListPushBack(SListNode** pplist, SLTDateType x)
{
	SListNode* newnode = BuySListNode(x);

	if (*pplist == NULL)
	{
		*pplist = newnode;
	}
	else
	{
		SListNode* tail = *pplist;
		while (tail->next != NULL)
		{
			tail = tail->next;
		}

		tail->next = newnode;
	}
}

void SListPushFront(SListNode** pplist, SLTDateType x)
{
	SListNode* newnode = BuySListNode(x);

	newnode->next = *pplist;
	*pplist = newnode;
}
void SListPopBack(SListNode** pplist)
{
	assert(*pplist);

	if ((*pplist)->next == NULL)
	{
		free(*pplist);
		*pplist = NULL;
	}
}
void SListPopFront(SListNode** pplist)
{
	assert(*pplist);

	SListNode* newhead = (*pplist)->next;
	free(*pplist);
	*pplist = newhead;
}
SListNode* SListFind(SListNode* plist, SLTDateType x)
{
	SListNode* cur = plist;
	while (cur)
	{
		if (cur->data == x)
			return cur;
		else
			cur = cur->next;
	}
	return NULL;
}
void SListInsertAfter(SListNode* pos, SLTDateType x)
{
	assert(pos);

	SListNode* newnode = BuySListNode(x);
	newnode->next = pos->next;
	pos->next = newnode;
}
void SListInsert(SListNode** plist, SListNode* pos, SLTDateType x)
{
	assert(plist);
	assert(pos);
	SListNode* newnode = BuySListNode(x);
	if (*plist == pos)
	{
		newnode->next = *plist;
		*plist = newnode;
	}
	else
	{
		SListNode* findpos = *plist;
		while (findpos->next!=pos)
		{
			findpos = findpos->next;
		}
		findpos->next = newnode;
		newnode->next = pos;
	}
}
void SListEraseAfter(SListNode* pos)
{
	assert(pos);
	assert(pos->next);

	SListNode* next = pos->next;
	pos->next = next->next;
	free(next);
}
void SListErase(SListNode** plist, SListNode* pos)
{
	assert(plist);
	assert(pos);
	if (*plist == pos)
	{
		SListPopFront(plist);
	}
	else
	{
		SListNode* prev = *plist;
		while (prev->next!=pos)
		{
			prev = prev->next;
		}

		prev->next = pos->next;
		free(pos);
	}
}
void SListDestroy(SListNode** plist)
{
	assert(plist);

	SListNode* cur = *plist;
	while (cur)
	{
		SListNode* next = cur->next;
		free(cur);
		cur = next;
	}
	*plist = NULL;
}

//test.c
#include "Slist.h"

int main()
{
	SListNode* L1=NULL;
	SListPushBack(&L1, 1);
	SListPushBack(&L1, 2);
	SListPushBack(&L1, 3);
	SListPushBack(&L1, 4);
	SListPushFront(&L1, 1);
	SListPushFront(&L1, 2);
	SListPushFront(&L1, 3);
	SListPushFront(&L1, 4);
	SListPrint(L1);

	SListPopBack(&L1);
	SListPopFront(&L1);
	SListPrint(L1);

	printf("%d\n", SListFind(L1, 2)->data);

	SListInsertAfter(L1->next, 1);
	SListPrint(L1);

	SListInsert(&L1, L1, 4);
	SListPrint(L1);

	SListEraseAfter(L1->next->next);
	SListPrint(L1);

	SListErase(&L1, L1->next);
	SListPrint(L1);

	SListDestroy(&L1);
	return 0;
}
