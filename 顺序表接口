#pragma once
#include <stdio.h>
#include <assert.h>
#include <stdlib.h>

// 静态的顺序表
//#define N 100
//struct SeqList
//{
//	int a[N];
//	int size;
//};

//typedef ContactInfo SeqDataType;
typedef int SeqDataType;

typedef struct SeqList
{
	SeqDataType* a;
	int size;      // 有效数据的个数
	int capacity;  // 容量
}SeqList, SEQ;

// 内存中个管理数据的结构增删查改的借口

// 头插尾插，头删尾删
void SeqListInit(SeqList* pq);
void SeqListDestory(SeqList* pq);
void SeqListPrint(SeqList* pq);

//void SeqListPushBack(SEQ seq, SeqDataType x);
void SeqListPushBack(SeqList* pq, SeqDataType x);
void SeqListPushFront(SeqList* pq, SeqDataType x);
void SeqListPopBack(SeqList* pq);
void SeqListPopFront(SeqList* pq);
int SeqListFind(SeqList* pq, SeqDataType x);
void SeqListInsert(SeqList* pq, int pos, SeqDataType x);
void SeqListErase(SeqList* pq, int pos);
void SeqListModify(SeqList* pq, int pos, SeqDataType x);



 #include "SeqList.h"

void SeqListInit(SeqList* pq)
{
	//assert(pq != NULL);
	assert(pq);

	pq->a = NULL;
	pq->size = pq->capacity = 0;
}

void SeqListDestory(SeqList* pq)
{
	assert(pq);

	free(pq->a);
	pq->a = NULL;
	pq->capacity = pq->size = 0;
}

void SeqListPrint(SeqList* pq)
{
	assert(pq);
	for (int i = 0; i < pq->size; ++i)
	{
		printf("%d ", pq->a[i]);
	}
	printf("\n");
}

void SeqCheckCapacity(SeqList* pq)
{
	// 满了，需要增容
	if (pq->size == pq->capacity)
	{
		int newcapacity = pq->capacity == 0 ? 4 : pq->capacity * 2;
		SeqDataType* newA = realloc(pq->a, sizeof(SeqDataType)*newcapacity);
		if (newA == NULL)
		{
			printf("realloc fail\n");
			exit(-1);
		}

		pq->a = newA;
		pq->capacity = newcapacity;
	}
}

void SeqListPushBack(SeqList* pq, SeqDataType x)
{
	/*assert(pq);

	SeqCheckCapacity(pq);

	pq->a[pq->size] = x;
	pq->size++;*/

	SeqListInsert(pq, pq->size, x);
}

void SeqListPushFront(SeqList* pq, SeqDataType x)
{
	/*assert(pq);

	SeqCheckCapacity(pq);

	int end = pq->size - 1;
	while (end >= 0)
	{
		pq->a[end + 1] = pq->a[end];
		--end;
	}

	pq->a[0] = x;
	pq->size++;*/

	SeqListInsert(pq, 0, x);
}

void SeqListPopBack(SeqList* pq)
{
	/*assert(pq);
	assert(pq->size > 0);

	--pq->size;*/

	SeqListErase(pq, pq->size - 1);
}

void SeqListPopFront(SeqList* pq)
{
	/*assert(pq);
	assert(pq->size > 0);

	int begin = 0;
	while (begin < pq->size-1)
	{
		pq->a[begin] = pq->a[begin+1];
		++begin;
	}

	pq->size--;*/

	SeqListErase(pq, 0);
}

int SeqListFind(SeqList* pq, SeqDataType x)
{
	assert(pq);

	for (int i = 0; i < pq->size; ++i)
	{
		if (pq->a[i] == x)
		{
			return i;
		}
	}

	return -1;
}

void SeqListInsert(SeqList* pq, int pos, SeqDataType x)
{
	assert(pq);
	assert(pos >= 0 && pos <= pq->size);

	SeqCheckCapacity(pq);

	int end = pq->size - 1;
	while (end >= pos)
	{
		pq->a[end + 1] = pq->a[end];
		--end;
	}

	pq->a[pos] = x;
	pq->size++;
}

void SeqListErase(SeqList* pq, int pos)
{
	assert(pq);
	assert(pos >= 0 && pos < pq->size);

	int begin = pos;
	while (begin <= pq->size-1)
	{
		pq->a[begin] = pq->a[begin+1];
		++begin;
	}

	pq->size--;
}

void SeqListModify(SeqList* pq, int pos, SeqDataType x)
{
	assert(pq);
	assert(pos >= 0 && pos < pq->size);

	pq->a[pos] = x;
}
