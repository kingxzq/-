//seqlist.h
#define _CRT_SECURE_NO_WARNINGS 1
#pragma once
#include <stdio.h>
#include <assert.h>
#include <stdlib.h>

typedef int SLDateType;
typedef struct SeqList
{
	SLDateType* a;
	int size;
	int capacity;
}SeqList;

// 对数据的管理:增删查改 
void SeqListInit(SeqList* ps);
void SeqListDestroy(SeqList* ps);

void SeqListPrint(SeqList* ps);
void SeqListPushBack(SeqList* ps, SLDateType x);
void SeqListPushFront(SeqList* ps, SLDateType x);
void SeqListPopFront(SeqList* ps);
void SeqListPopBack(SeqList* ps);

// 顺序表查找
int SeqListFind(SeqList* ps, SLDateType x);
// 顺序表在pos位置插入x
void SeqListInsert(SeqList* ps, int pos, SLDateType x);
// 顺序表删除pos位置的值
void SeqListErase(SeqList* ps, int pos);

//seqlist.c
#include"Seqlist.h"
void SeqListInit(SeqList* ps)
{
    ps->a=(SLDateType*)malloc(sizeof(SLDateType)*4);
    if(ps->a==NULL)
    {
        perror("malloc failed");
        exit(-1);
    }
    ps->capacity=4;
    ps->size=0;
}

void CheckCapacity(SeqList* ps)
{
    if(ps->size==ps->capacity)
    {
        SeqList* tmp = (SLDateType*)realloc(ps->a,ps->capacity*sizeof(SLDateType)*2);
        if(tmp==NULL)
        {
            perror("realloc failed");
            exit(-1);
        }
        ps->a=tmp;
        ps->capacity*=2;
    }
}
void SeqListDestroy(SeqList* ps)
{
    free(ps->a);
    ps->a=NULL;
    ps->capacity=ps->size=0;
}

void SeqListPrint(SeqList* ps)
{
    for(int i=0;i<ps->size;i++)
    {
        printf("%d ",ps->a[i]);
    }
    printf("\n");
}
void SeqListPushBack(SeqList* ps, SLDateType x)
{
    //CheckCapacity(ps);
    //ps->a[ps->size++]=x;
    SeqListInsert(ps, ps->size, x);
}
void SeqListPushFront(SeqList* ps, SLDateType x)
{
    //CheckCapacity(ps);
    /*for (int i = ps->size - 1; i >= 0; i--)
    {
        ps->a[i + 1] = ps->a[i];
    }
    ps->a[0]=x;
    ps->size++;*/
    SeqListInsert(ps, 0, x);
}
void SeqListPopFront(SeqList* ps)
{
    assert(ps->size > 0);
    for (int i = 1; i < ps->size; i++)
    {
        ps->a[i - 1] = ps->a[i];
    }
    ps->size--;

}
void SeqListPopBack(SeqList* ps)
{
    assert(ps->size>0);
    ps->size--;
}

// 顺序表查找
int SeqListFind(SeqList* ps, SLDateType x)
{
    for (int i = 0; i < ps->size; i++)
    {
        if (ps->a[i] == x)
            return i;
    }
    return -1;
}
// 顺序表在pos位置插入x
void SeqListInsert(SeqList* ps, int pos, SLDateType x)
{
    assert(pos>=0&&pos <= ps->size);
    CheckCapacity(ps);
    for (int i = ps->size - 1; i >= pos; i--)
    {
        ps->a[i + 1] = ps->a[i];
    }
    ps->a[pos] = x;
    ps->size++;
}
// 顺序表删除pos位置的值
void SeqListErase(SeqList* ps, int pos)
{
    assert(pos >= 0 && pos <= ps->size);
    for (int i = pos + 1; i < ps->size; i++)
    {
        ps->a[i - 1] = ps->a[i];
    }
    ps->size--;
}

//test.c
#include"Seqlist.h"

void Menu()
{
	printf("*******************************************\n");
	printf("**********1.头插           2.头删**********\n");
	printf("**********3.尾插           4.尾删**********\n");
	printf("**********5.打印          -1.退出**********\n");
	printf("*******************************************\n");
}
void MenuTest()
{
	SeqList sl;
	SeqListInit(&sl);
	int input = 0;
	int x;
	while (input != -1)
	{
		Menu();
		scanf("%d", &input);
		switch (input)
		{
		case 1:
			printf("请输入你要头插的数据，以-1结束：");
			scanf("%d", &x);
			while (x != -1)
			{
				SeqListPushFront(&sl, x);
				scanf("%d", &x);
			}
			break;
		case 2:
			SeqListPopFront(&sl);
			break;
		case 3:
			printf("请输入你要尾插的数据，以-1结束：");
			scanf("%d", &x);
			while (x != -1)
			{
				SeqListPushBack(&sl, x);
				scanf("%d", &x);
			}
			break;
		case 4:
			SeqListPopBack(&sl);
			break;
		case 5:
			SeqListPrint(&sl);
			break;
		default:
			printf("无此选项，请重新输入\n");
			break;
		}
	}
	SeqListDestroy(&sl);
}
void TestSeqList3()
{
	SeqList sl;
	SeqListInit(&sl);
	SeqListPushBack(&sl, 1);
	SeqListPushBack(&sl, 2);
	SeqListPushBack(&sl, 3);
	SeqListPushBack(&sl, 4);
	SeqListPrint(&sl);
	SeqListInsert(&sl, 2, 30);
	SeqListPrint(&sl);
	SeqListErase(&sl, 0);
	int pos = SeqListFind(&sl, 4);
	if (pos != -1)
	{
		SeqListErase(&sl, pos);
	}
	SeqListPrint(&sl);
	SeqListDestroy(&sl);
}

int main()
{
	//MenuTest();
	TestSeqList3();
	return 0;
}
